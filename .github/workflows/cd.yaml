name: Build, Test and Deploy to Production ECR
on:
  push:
    branches:
      - master
    paths-ignore:
    - 'README.md'
    - '.vscode/**'

jobs:
  build:
    runs-on: ubuntu-latest
    # use a known build environment
    container: python:3.9-slim

    # Required services    
    services:
      # Label used to access the service container
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: pgs3cr3t
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # Steps for the build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Install libraries for PostgreSQL
        run: |
          apt-get update
          apt-get install -y gcc libpq-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


      # - name: Run unit tests with nose
      #   run: |
      #     export FLASK_APP=service:app
      #     nosetests
      #   env:
      #     DATABASE_URI: "postgresql://postgres:pgs3cr3t@postgres:5432/testdb"
  

  
  deploy: 
    name: Deploy to ECR
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: AKIAUXHD6LSDRNOOLW7Z
        aws-secret-access-key: 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
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ninjatech
        IMAGE_TAG: ninjatech-assignment
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
